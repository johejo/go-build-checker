name: build
on:
  workflow_dispatch: {}
  schedule:
    - cron: "0 0 * * *"
jobs:
  build-tip:
    runs-on: ubuntu-24.04
    outputs:
      sha: ${{ steps.sha.outputs.sha }}
    steps:
      - name: Get SHA
        id: sha
        run: |
          SHA=$(gh api 'repos/golang/go/commits?per_page=1' --jq '.[].sha')
          echo "SHA=$SHA" >> "$GITHUB_ENV"
          echo "sha=$SHA" >> "$GITHUB_OUTPUT"
        env:
          GH_TOKEN: ${{ github.token }}
      - name: cache
        uses: actions/cache@v4
        id: cache-tip
        with:
          path: go-${{ env.SHA }}
          key: go-${{ env.SHA }}
      - uses: actions/setup-go@v5
        if: steps.cache-tip.outputs.cache-hit != 'true'
        with:
          go-version: '1.23'
      - name: build tip
        if: steps.cache-tip.outputs.cache-hit != 'true'
        run: |
          curl -fsSL "https://github.com/golang/go/archive/$SHA.tar.gz" | tar zx
          echo "devel $SHA" > "go-$SHA/VERSION"
          pushd "go-$SHA/src"
          ./make.bash
  build:
    needs: [build-tip]
    strategy:
      fail-fast: false
      matrix:
        runner: ["ubuntu-24.04", "ubuntu-24.04-arm"]
        include:
          - target: "99designs/gqlgen"
          - target: "GoogleCloudPlatform/terraformer"
          - target: "GoogleContainerTools/kaniko"
          - target: "GoogleContainerTools/skaffold"
          - target: "VictoriaMetrics/VictoriaMetrics"
          - target: "aquasecurity/tfsec"
          - target: "argoproj/argo-cd"
          - target: "authelia/authelia"
          - target: "benthosdev/benthos"
          - target: "buildpacks/pack"
          - target: "cayleygraph/cayley"
          - target: "cilium/cilium"
          - target: "codenotary/immudb"
          - target: "concourse/concourse"
          - target: "containerd/containerd"
          - target: "containers/skopeo"
          - target: "containrrr/watchtower"
          - target: "coredns/coredns"
          - target: "cortexproject/cortex"
          - target: "derailed/k9s"
          - target: "dgraph-io/badger"
          - target: "emitter-io/emitter"
          - target: "etcd-io/etcd"
          - target: "ethereum/go-ethereum"
          - target: "flannel-io/flannel"
          - target: "future-architect/vuls"
          - target: "go-delve/delve"
          - target: "go-gitea/gitea"
          - target: "gohugoio/hugo"
          - target: "golang-migrate/migrate"
          - target: "golangci/golangci-lint"
          - target: "gomods/athens"
#         - target: "gopherjs/gopherjs"
          - target: "goreleaser/goreleaser"
          - target: "grafana/k6"
          - target: "grpc-ecosystem/grpc-gateway"
          - target: "hashicorp/boundary"
          - target: "hashicorp/consul"
          - target: "hashicorp/nomad"
          - target: "hashicorp/packer"
          - target: "hashicorp/terraform"
          - target: "hashicorp/vault"
          - target: "hashicorp/waypoint"
          - target: "helm/helm"
          - target: "helmfile/helmfile"
          - target: "jaegertracing/jaeger"
          - target: "juju/juju"
          - target: "kedacore/keda"
          - target: "knative/serving"
          - target: "kubernetes/ingress-nginx"
          - target: "kubernetes/kops"
          - target: "linkerd/linkerd2"
          - target: "minio/minio"
          - target: "microsoft/typescript-go"
          - target: "moby/buildkit"
          - target: "nats-io/nats-server"
          - target: "nsqio/nsq"
          - target: "opencontainers/umoci"
          - target: "open-policy-agent/opa"
          - target: "open-telemetry/opentelemetry-collector"
          - target: "openshift/oc"
            deps: ["libgpgme-dev"]
          - target: "operator-framework/operator-sdk"
            deps: ["libgpgme-dev"]
          - target: "ory/hydra"
          - target: "ory/keto"
          - target: "ory/kratos"
          - target: "perkeep/perkeep"
          - target: "projectcontour/contour"
          - target: "projectdiscovery/httpx"
          - target: "prometheus/prometheus"
          - target: "quay/clair"
          - target: "rclone/rclone"
          - target: "restic/restic"
          - target: "rh12503/triangula"
          - target: "rook/rook"
          - target: "rqlite/rqlite"
          - target: "runatlantis/atlantis"
          - target: "schollz/croc"
          - target: "spiffe/spire"
          - target: "tektoncd/pipeline"
          - target: "tendermint/tendermint"
          - target: "terraform-linters/tflint"
          - target: "thanos-io/thanos"
#         - target: "uber/cadence"
          - target: "vmware-tanzu/octant"
            deps: ["libbtrfs-dev", "libdevmapper-dev"]
          - target: "vmware-tanzu/velero"
          - target: "weaveworks/ignite"
    runs-on: ${{ matrix.runner }}
    env:
      GOAMD64: v3
      DEPS: ${{ join(matrix.deps, ' ') }}
      SHA: ${{ needs.build-tip.outputs.sha }}
    steps:
      - name: install deps
        if: ${{ env.DEPS != '' }}
        run: |
          sudo apt-get update
          sudo apt-get install -y $DEPS
      - name: download
        uses: actions/cache@v4
        with:
          path: go-${{ env.SHA }}
          key: go-${{ env.SHA }}
      - name: set env
        run: |
          echo "GOTIP=$PWD/go-${{ env.SHA }}/bin/go" >> "$GITHUB_ENV"
      - name: check version
        run: |
          "$GOTIP" version
          "$GOTIP" env
      - uses: actions/checkout@v4
        with:
          repository: ${{ matrix.target }}
          submodules: true
          path: ${{ matrix.target }}
      - name: gotip build
        run: |
          "$GOTIP" build ./...
        working-directory: ${{ matrix.target }}
